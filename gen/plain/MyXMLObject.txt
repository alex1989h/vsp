package %s;

import java.io.StringWriter;

import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.TransformerFactoryConfigurationError;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;

public class %s {
	Element document = null;
	public %s(Element document) {
		this.document = document;
	}
	public String getXMLTyp(){
		return document.getLastChild().getNodeName();
	}
	public String getMethodName(){
		return document.getElementsByTagName("methodName").item(0).getTextContent();
	}
	
	public String getReturnType(){
		return document.getElementsByTagName("returnType").item(0).getTextContent();
	}
	
	public String[] getParamTypes(){
		String[] cl;
		NodeList nL = document.getElementsByTagName("param");
		cl = new String[nL.getLength()];
		for (int i = 0; i < nL.getLength(); i++) {
			cl[i] = getParamType(nL.item(i));
		}
		return cl;
	}
	
	public int getTransactionsID(){
		return Integer.parseInt(document.getElementsByTagName("transactionsID").item(0).getTextContent());
	}
	
	private String getParamType(Node node){
		switch (node.getFirstChild().getFirstChild().getNodeName()) {
		case "int":
			return "int";
		case "string":
			return "String";
		case "long":
			return "long";
		default:
			break;
		}
		return "";
	}
	
	public Object[] getParamValues(){
		Object[] obj;
		NodeList nL = document.getElementsByTagName("param");
		obj = new Object[nL.getLength()];
		for (int i = 0; i < nL.getLength(); i++) {
			obj[i] = getParamValue(nL.item(i));
		}
		return obj;
	}
	
	private Object getParamValue(Node node){
		switch (node.getFirstChild().getFirstChild().getNodeName()) {
		case "int":
			return Integer.parseInt(node.getFirstChild().getFirstChild().getFirstChild().getTextContent());
		case "long":
			return Long.parseLong(node.getFirstChild().getFirstChild().getFirstChild().getTextContent());
		case "string":
			return node.getFirstChild().getFirstChild().getFirstChild().getTextContent();
		default:
			break;
		}
		return null;
	}
	
	public void print(){
		Transformer transformer;
		try {
			transformer = TransformerFactory.newInstance().newTransformer();
			transformer.setOutputProperty(OutputKeys.INDENT, "yes");
			transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");
			transformer.setOutputProperty(OutputKeys.DOCTYPE_PUBLIC, "yes");
			StreamResult result = new StreamResult(new StringWriter());
			DOMSource source = new DOMSource(document);
			transformer.transform(source, result);
			String xmlString = result.getWriter().toString();
			System.out.println(xmlString);
		} catch (TransformerFactoryConfigurationError | TransformerException e1) {
			e1.printStackTrace();
		}
	}
}
